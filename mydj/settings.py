"""
Django settings for mydj project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = str(os.getenv('SECRET_KEY'))

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    "corsheaders",
    'cloudinary',
    'cloudinary_storage',
]
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

EXTERNAL_APPS = [
    'home',
    'accounts',
    'vege',
    'logviewer'
]

INSTALLED_APPS += EXTERNAL_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

MIDDLEWARE += [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.common.CommonMiddleware',
]

CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True
ALLOWED_HOSTS = ['*']


ROOT_URLCONF = 'mydj.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mydj.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
from dotenv import load_dotenv
load_dotenv()
from os import getenv

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': str(os.getenv('DB_NAME')),
#         'USER': str(os.getenv('DB_USER')),
#         'PASSWORD': str(os.getenv('DB_PASS')),
#         'HOST': str(os.getenv('DB_HOST')),
#         'PORT': str(os.getenv('DB_PORT'))
#     }
# }
DATABASES = {
  'default': {
    'ENGINE': 'django.db.backends.postgresql',
    'NAME': getenv('PGDATABASE'),
    'USER': getenv('PGUSER'),
    'PASSWORD': getenv('PGPASSWORD'),
    'HOST': getenv('PGHOST'),
    'PORT': getenv('PGPORT', 5432),
    'OPTIONS': {
      'sslmode': 'require',
    },
  }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# if we want to use media file we need to do the following
import os
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATIC_ROOT =os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = 'static/'

# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# MEDIA_ROOT=''


import cloudinary
import cloudinary.uploader
import cloudinary.api

# Configure Cloudinary with your credentials
cloudinary.config( 
  cloud_name = 'dehyaj8lm',  
  api_key = getenv('IMAGE_HOST_CLOUDINARY_KEY'),  
  api_secret = getenv('IMAGE_HOST_CLOUDINARY_SECRET')
)

# Optional: Cloudinary storage settings
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
# MEDIA_URL = '/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

# DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PAGINATION_CLASS':[
            # 'rest_framework.pagination.LimitOffsetPagination',
            # 'core.pagination.StandardResultsSetPagination'
            'core.pagination.CustomPagination'
    ],
    'PAGE_SIZE': 10,

}

import redis
# r = redis.Redis(
#   host='redis-11304.c275.us-east-1-4.ec2.redns.redis-cloud.com',
#   port=11304,
#   password=getenv('REDIS_PASS_CLOUD'))



CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": f"redis://default:{getenv('REDIS_PASS_CLOUD')}@redis-11304.c275.us-east-1-4.ec2.redns.redis-cloud.com:11304",
        "OPTIONS":{
            "db":"cache-M0GJLON5",
            # "password":"getenv('REDIS_PASS')),
        }
    }
}

# CACHES = {
#     "default": {
#         "BACKEND": "django.core.cache.backends.redis.RedisCache",
#         "LOCATION": f"redis://default:{getenv('REDIS_PASS_VERCEL')}@redis-14927.c256.us-east-1-2.ec2.redns.redis-cloud.com:14927",
#         "OPTIONS":{
#             "db":"redis-orange-zebra",
#         }
#     }
# }


import logging.config
import os
from django.utils.log import DEFAULT_LOGGING

# Disable Django's default logging configuration
LOGGING_CONFIG = None

# Set the log level based on an environment variable, default to 'INFO'
LOGLEVEL = os.environ.get('LOGLEVEL', 'INFO').upper()

# Configure logging
logging.config.dictConfig({
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'default': {
            'format': '%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
        },
        'django.server': DEFAULT_LOGGING['formatters']['django.server'],
    },
    'handlers': {
        # Console handler to output logs to stderr
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'default',
        },
        # Django server handler for request logs
        'django.server': DEFAULT_LOGGING['handlers']['django.server'],
    },
    'loggers': {
        # Root logger for all modules
        # '': {
        #     'level': LOGLEVEL,
        #     'handlers': ['console'],
        #     'propagate': False,
        # },
        # Application-specific logger
        'app': {
            'level': 'INFO',
            'handlers': ['console'],
            'propagate': False,
        },
        # Logger for Django's runserver output
        # 'django.server': {
        #     'level': 'INFO',
        #     'handlers': ['console'],
        #     'propagate': False,
        # },
    },
})

# Create an application-specific logger
logger = logging.getLogger('app')

# Example usage of the logger
logger.info("Logging is set up successfully!")


# import logging.config
# import os
# from django.utils.log import DEFAULT_LOGGING

# # Disable Django's logging setup
# LOGGING_CONFIG = None

# LOGLEVEL = os.environ.get('LOGLEVEL', 'info').upper()

# logging.config.dictConfig({
#     'version': 1,
#     'disable_existing_loggers': False,
#     'formatters': {
#         'default': {
#             # exact format is not important, this is the minimum information
#             'format': '%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
#         },
#         'django.server': DEFAULT_LOGGING['formatters']['django.server'],
#     },
#     'handlers': {
#         # console logs to stderr
#         'console': {
#             'class': 'logging.StreamHandler',
#             'formatter': 'default',
#         },
#         'django.server': DEFAULT_LOGGING['handlers']['django.server'],
#     },
#     'loggers': {
#         # default for all undefined Python modules
#         '': {
#             'level': 'WARNING',
#             'handlers': ['console'],
#         },
#         # Our application code
#         'app': {
#             'level': LOGLEVEL,
#             'handlers': ['console'],
#             # Avoid double logging because of root logger
#             'propagate': False,
#         },
#         # Default runserver request logging
#         'django.server': DEFAULT_LOGGING['loggers']['django.server'],
#     },
# })

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'console': {
#             'level': 'DEBUG',
#             'class': 'logging.StreamHandler',
#         },
#         'bot': {
#             'level': 'ERROR',
#             'class': 'logging.FileHandler',
#             'filename':os.path.join(BASE_DIR, 'djgo.log'),  # Ensure this path is correct and writable
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console'],
#             'level': 'INFO',
#             'propagate': True,
#         },
#         'bot_logger': {
#             'handlers': ['bot'],
#             'level': 'ERROR',
#             'propagate': False,
#         },
#     },
# }

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'formatters': {
#         'verbose': {
#             'format': '{levelname} {asctime} {module} {message}',
#             'style': '{',
#         },
#         'simple': {
#             'format': '{levelname} {message}',
#             'style': '{',
#         },
#     },
#     'handlers': {
#         'console': {
#             'class': 'logging.StreamHandler',
#             'formatter': 'verbose',
#         },
#         'file': {
#             'class': 'logging.FileHandler',
#             'filename': os.path.join(BASE_DIR, 'djgo.log'),  # Change to your desired log file path
#             'formatter': 'verbose',
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console', 'file'],
#             'level': 'INFO',  # Change to DEBUG for more detailed logs
#             'propagate': True,
#         },
#         'mydj': {  
#             'handlers': ['file'],
#             'level': 'DEBUG',  # Log level for your app
#             'propagate': False,
#         },
#     },
# }
